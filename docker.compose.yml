services:
  # mysql
  mysqldb:
    image: mysql:8.4.0
    #latest bad practice - https://www.augmentedmind.de/2022/05/15/docker-image-tag-best-practices/
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MYSQL_ROOT_PASSWORD=qqddqsqddqqdqdsqds
      - MYSQL_DATABASE=medilabo
    ports:
      - '3306:3306'
    volumes:
      - medilabo:/var/lib/mysql
    networks:
      - backend

  # mongo db
  mongo:
    image: mongo
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=admin
    ports:
      - '27017:27017'
    networks:
      - backend

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - '9000:8081'  # Corrected port mapping
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin
      - ME_CONFIG_MONGODB_URL=mongodb://root:admin@mongo:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    depends_on:
      - mongo
    networks:
      - backend
    volumes:
      - medrecords:/var/lib/mongodb

  #Services initiation
  eurekaserver:
    build:
      context: ./
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - backend
    ports:
      - '8761:8761'

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - backend
    ports:
      - '5002:5002'

  #https://docs:docker:com/engine/storage/volumes/:
  volumekeeper: #ensures the volume stays alive
    image: alpine:latest
    command: tail -f /dev/null
    networks:
      - backend
    volumes:
      - shared-libs:/libs

  shareddto:
    build:
      context: ./shareddto
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - backend
    volumes:
      - shared-libs:/libs
    command: tail -f /dev/null # it is needed otherwise it does not have enough time to share the files

  sharedinterface:
    build:
      context: ./sharedinterface
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - backend
    volumes:
    #shares the JAR to be reused
      - shared-libs:/libs
    depends_on:
      - shareddto

  medicalrecordservice:
    build:
      context: ./medicalrecordservice
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - '5003:5003'
    networks:
      - backend
    volumes:
      - shared-libs:/libs
    depends_on:
      - mongo

  patientservice:
    build:
      context: ./patients
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - '5004:5004'
    networks:
      - backend
    depends_on:
      - medicalrecordservice
      - mysqldb
    volumes:
      - shared-libs:/libs

  riskservice:
    build:
      context: ./riskservice
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - '5005:5005'
    depends_on:
      - medicalrecordservice
      - patientservice
    networks:
      - backend
    volumes:
      - shared-libs:/libs

  frontendservice:
    build:
      context: ./frontendservice
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - backend
    ports:
      - '5006:5006'
    volumes:
      - shared-libs:/libs
    depends_on:
      - medicalrecordservice
      - patientservice
      - riskservice

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

#shared volumes
volumes:
  medrecords:
  medilabo:
  #https://docs:docker:com/reference/compose-file/volumes/:
  shared-libs:
    driver: local #builts volume persistency and sharing across the data


  #https://medium.com/@chrischuck35/how-to-create-a-mysql-instance-with-docker-compose-1598f3cc1bee
  #https://hub:docker:com/_/mongo:
  #https://www:youtube:com/watch?v=QumOvEDMQ34: